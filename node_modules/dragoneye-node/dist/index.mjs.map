{"version":3,"sources":["../src/common.ts","../src/classification.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["export type TaxonID = number & { readonly brand: unique symbol };\n\nexport function createTaxonID(taxonId: number): TaxonID {\n  return taxonId as TaxonID;\n}\n\nexport enum TaxonomyKingdom {\n  FASHION = createTaxonID(185024717),\n  FURNITURE = createTaxonID(1255307938),\n}\n\nexport type NormalizedBbox = [number, number, number, number];\n\nexport enum TaxonType {\n  category = \"category\",\n  trait = \"trait\",\n}\n\nexport type TaxonPrediction = {\n  id: TaxonID;\n  type: TaxonType;\n  name: string;\n  displayName: string;\n  score?: number;\n  children: TaxonPrediction;\n};\n\nexport const BASE_API_URL = \"https://api.dragoneye.ai\";\n","/// <reference path=\"client.ts\" />\n\nimport {\n  BASE_API_URL,\n  NormalizedBbox,\n  TaxonID,\n  TaxonPrediction,\n  TaxonomyKingdom,\n} from \"./common\";\nimport type { Client } from \"./client\";\nimport type { Image } from \"./image\";\nimport axios, { AxiosResponse } from \"axios\";\n\nexport interface ClassificationTraitRootPrediction {\n  id: TaxonID;\n  name: string;\n  displayName: string;\n  taxons: TaxonPrediction[];\n}\n\nexport interface ClassificationObjectPrediction {\n  normalizedBbox: NormalizedBbox;\n  category: TaxonPrediction;\n  traits: ClassificationTraitRootPrediction[];\n}\n\nexport interface ClassificationPredictImageResponse {\n  predictions: ClassificationObjectPrediction[];\n}\n\nexport interface ClassificationPredictImageRequest {\n  image: Image;\n  taxonomyKingdom: TaxonomyKingdom;\n}\n\nexport class Classification {\n  protected _client: Client;\n\n  constructor(private client: Client) {\n    this._client = client;\n  }\n\n  async predict({\n    image,\n    taxonomyKingdom,\n  }: ClassificationPredictImageRequest): Promise<ClassificationPredictImageResponse> {\n    const url = `${BASE_API_URL}/predict`;\n\n    const formData = new FormData();\n\n    if (image.blob !== undefined) {\n      formData.append(\"image_file\", image.blob);\n    } else if (image.url !== undefined) {\n      formData.append(\"image_url\", image.url);\n    } else {\n      throw new Error(\n        \"Missing image: Either image file or image url must be specified\"\n      );\n    }\n\n    formData.append(\"taxonomy_kingdom\", taxonomyKingdom.toString());\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        Authorization: `Bearer ${this._client.apiKey}`,\n      },\n    };\n\n    let response: AxiosResponse<any, any>;\n\n    try {\n      response = await axios.post(url, formData, config);\n    } catch (error) {\n      console.error(\n        \"Error during Dragoneye Classification prediction request:\",\n        error\n      );\n      throw error;\n    }\n\n    return response.data as ClassificationPredictImageResponse;\n  }\n}\n","import { Classification } from \"./classification\";\n\nfunction readEnvVar(key: string): string | undefined {\n  return process.env[key];\n}\n\nexport interface ClientOptions {\n  /**\n   * Defaults to process.env['DRAGONEYE_API_KEY']\n   */\n  apiKey?: string | undefined;\n}\n\nexport class Client {\n  apiKey: string;\n  classification: Classification = new Classification(this);\n\n  constructor({ apiKey = readEnvVar(\"DRAGONEYE_API_KEY\") }: ClientOptions) {\n    if (apiKey === undefined) {\n      throw new Error(\n        \"API key is required: Either DRAGONEYE_API_KEY must be specified, or apiKey should be specified for the client.\"\n      );\n    }\n\n    this.apiKey = apiKey;\n  }\n}\n","import * as ClientAPI from \"./client\";\nimport * as ImageAPI from \"./image\";\nimport * as ClassificationAPI from \"./classification\";\nimport * as Common from \"./common\";\n\nexport namespace Dragoneye {\n  export import Client = ClientAPI.Client;\n  export import Image = ImageAPI.Image;\n  export import Classification = ClassificationAPI.Classification;\n  export import TaxonomyKingdom = Common.TaxonomyKingdom;\n}\n"],"mappings":";AAEO,SAAS,cAAc,SAA0B;AACtD,SAAO;AACT;AAEO,IAAK,mBAAL,CAAKA,qBAAL;AACL,EAAAA,kCAAA,aAAU,cAAc,SAAS,KAAjC;AACA,EAAAA,kCAAA,eAAY,cAAc,UAAU,KAApC;AAFU,SAAAA;AAAA,GAAA;AAqBL,IAAM,eAAe;;;AChB5B,OAAO,WAA8B;AAwB9B,IAAM,iBAAN,MAAqB;AAAA,EAG1B,YAAoB,QAAgB;AAAhB;AAClB,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,MAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,EACF,GAAmF;AACjF,UAAM,MAAM,GAAG,YAAY;AAE3B,UAAM,WAAW,IAAI,SAAS;AAE9B,QAAI,MAAM,SAAS,QAAW;AAC5B,eAAS,OAAO,cAAc,MAAM,IAAI;AAAA,IAC1C,WAAW,MAAM,QAAQ,QAAW;AAClC,eAAS,OAAO,aAAa,MAAM,GAAG;AAAA,IACxC,OAAO;AACL,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,aAAS,OAAO,oBAAoB,gBAAgB,SAAS,CAAC;AAE9D,UAAM,SAAS;AAAA,MACb,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,KAAK,QAAQ,MAAM;AAAA,MAC9C;AAAA,IACF;AAEA,QAAI;AAEJ,QAAI;AACF,iBAAW,MAAM,MAAM,KAAK,KAAK,UAAU,MAAM;AAAA,IACnD,SAAS,OAAO;AACd,cAAQ;AAAA,QACN;AAAA,QACA;AAAA,MACF;AACA,YAAM;AAAA,IACR;AAEA,WAAO,SAAS;AAAA,EAClB;AACF;;;ACjFA,SAAS,WAAW,KAAiC;AACnD,SAAO,QAAQ,IAAI,GAAG;AACxB;AASO,IAAM,SAAN,MAAa;AAAA,EAIlB,YAAY,EAAE,SAAS,WAAW,mBAAmB,EAAE,GAAkB;AAFzE,0BAAiC,IAAI,eAAe,IAAI;AAGtD,QAAI,WAAW,QAAW;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,SAAK,SAAS;AAAA,EAChB;AACF;;;ACrBO,IAAU;AAAA,CAAV,CAAUC,eAAV;AACE,EAAOA,WAAA,SAAmB;AAC1B,EAAOA,WAAA,QAAiB;AACxB,EAAOA,WAAA,iBAAmC;AAC1C,EAAOA,WAAA,kBAAyB;AAAA,GAJxB;","names":["TaxonomyKingdom","Dragoneye"]}