// src/common.ts
function createTaxonID(taxonId) {
  return taxonId;
}
var TaxonomyKingdom = ((TaxonomyKingdom3) => {
  TaxonomyKingdom3[TaxonomyKingdom3["FASHION"] = createTaxonID(185024717)] = "FASHION";
  TaxonomyKingdom3[TaxonomyKingdom3["FURNITURE"] = createTaxonID(1255307938)] = "FURNITURE";
  return TaxonomyKingdom3;
})(TaxonomyKingdom || {});
var BASE_API_URL = "https://api.dragoneye.ai";

// src/classification.ts
import axios from "axios";
var Classification = class {
  constructor(client) {
    this.client = client;
    this._client = client;
  }
  async predict({
    image,
    taxonomyKingdom
  }) {
    const url = `${BASE_API_URL}/predict`;
    const formData = new FormData();
    if (image.blob !== void 0) {
      formData.append("image_file", image.blob);
    } else if (image.url !== void 0) {
      formData.append("image_url", image.url);
    } else {
      throw new Error(
        "Missing image: Either image file or image url must be specified"
      );
    }
    formData.append("taxonomy_kingdom", taxonomyKingdom.toString());
    const config = {
      headers: {
        "Content-Type": "multipart/form-data",
        Authorization: `Bearer ${this._client.apiKey}`
      }
    };
    let response;
    try {
      response = await axios.post(url, formData, config);
    } catch (error) {
      console.error(
        "Error during Dragoneye Classification prediction request:",
        error
      );
      throw error;
    }
    return response.data;
  }
};

// src/client.ts
function readEnvVar(key) {
  return process.env[key];
}
var Client = class {
  constructor({ apiKey = readEnvVar("DRAGONEYE_API_KEY") }) {
    this.classification = new Classification(this);
    if (apiKey === void 0) {
      throw new Error(
        "API key is required: Either DRAGONEYE_API_KEY must be specified, or apiKey should be specified for the client."
      );
    }
    this.apiKey = apiKey;
  }
};

// src/index.ts
var Dragoneye;
((Dragoneye2) => {
  Dragoneye2.Client = Client;
  Dragoneye2.Image = void 0;
  Dragoneye2.Classification = Classification;
  Dragoneye2.TaxonomyKingdom = TaxonomyKingdom;
})(Dragoneye || (Dragoneye = {}));
export {
  Dragoneye
};
//# sourceMappingURL=index.mjs.map