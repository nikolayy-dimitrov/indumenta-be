"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Classification = void 0;
const common_1 = require("./common");
class Classification {
    constructor(client) {
        this.client = client;
        this._client = client;
    }
    predict(_a) {
        return __awaiter(this, arguments, void 0, function* ({ image, modelName, }) {
            const url = `${common_1.BASE_API_URL}/predict`;
            const formData = new FormData();
            if (image.blob !== undefined) {
                formData.append("image_file", image.blob);
            }
            else if (image.url !== undefined) {
                formData.append("image_url", image.url);
            }
            else {
                throw new Error("Missing image: Either image file or image url must be specified");
            }
            formData.append("model_name", modelName);
            let response;
            try {
                response = yield fetch(url, {
                    method: "POST",
                    body: formData,
                    headers: {
                        Authorization: `Bearer ${this._client.apiKey}`,
                    },
                });
            }
            catch (error) {
                console.error("Error during Dragoneye Classification prediction request:", error);
                throw error;
            }
            return (yield response.json());
        });
    }
}
exports.Classification = Classification;
